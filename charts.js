// Generated by CoffeeScript 1.9.2
(function() {
  var transformData;

  transformData = function(data) {
    return data.forEach(function(d) {
      d.Height = +d.Height;
      d.DBH = +d.DBH;
      d.Site = +d.Site;
      d.Beetle = +d.Beetle;
      d['Crown Cover'] = +d['Crown Cover'];
      return d.Year = +d.Year;
    });
  };

  d3.csv('/PineDataCorrectHypothesis.csv', function(data) {
    var aGroup, atteGroup, bGroup, beetleHistogramDimension, cGroup, coulGroup, dGroup, dimension, eGroup, hGroup, healthDimension, healthGroup, liveHistogramDimension, pineDataDimension, sGroup, sabiGroup, siteDimension, siteGroup, symbolScale, uGroup, yearDimension, yearGroup, yearHistogramDimension;
    transformData(data);
    console.log(data);
    window.facts = crossfilter(data);
    window.all = facts.groupAll();
    window.charts = {};
    charts['health'] = dc.pieChart('#health');
    healthDimension = facts.dimension(function(d) {
      return d.Health;
    });
    healthGroup = healthDimension.group();
    charts['health'].height(360).width(270).radius(130).dimension(healthDimension).group(healthGroup).minAngleForLabel(0).colors(d3.scale.ordinal().domain(['H', 'U', 'S', 'D']).range(['green', '#FFD700', 'orange', 'red']));
    charts['site'] = dc.pieChart('#site');
    siteDimension = facts.dimension(function(d) {
      return d.Site;
    });
    siteGroup = siteDimension.group();
    charts['site'].height(360).width(270).radius(130).dimension(siteDimension).group(siteGroup).minAngleForLabel(0).colors(d3.scale.category10());
    charts['year'] = dc.pieChart('#year');
    yearDimension = facts.dimension(function(d) {
      return d.Year;
    });
    yearGroup = yearDimension.group();
    charts['year'].height(360).width(270).radius(130).dimension(yearDimension).group(yearGroup).minAngleForLabel(0).colors(d3.scale.category10());
    charts['species'] = dc.pieChart('#species');
    yearDimension = facts.dimension(function(d) {
      return d.Species;
    });
    yearGroup = yearDimension.group();
    charts['species'].height(360).width(270).radius(130).dimension(yearDimension).group(yearGroup).minAngleForLabel(0).colors(d3.scale.category20());
    charts['scatter'] = dc.scatterPlot('#scatter');
    dimension = facts.dimension(function(d) {
      return [d.Year, d.DBH, d.Health, d.Species];
    });
    symbolScale = d3.scale.ordinal().range(d3.svg.symbolTypes);
    charts['scatter'].width(900).height(600).symbolSize(14).symbol(function(d) {
      return symbolScale(d.key[3]);
    }).x(d3.scale.linear()).x(d3.time.scale().domain([new Date(2015, 0, 1), new Date(2021, 11, 31)])).y(d3.scale.linear()).xAxisLabel("Year").yAxisLabel("DBH").elasticX(true).elasticY(true).clipPadding(10).colors(d3.scale.ordinal().domain(['H', 'U', 'S', 'D']).range(['green', '#FFD700', 'orange', 'red'])).colorAccessor(function(d) {
      return d.key[2];
    }).dimension(dimension).group(dimension.group()).xAxis().tickFormat(d3.format("d"));
    charts['histogram'] = dc.barChart('#histogram');
    yearHistogramDimension = facts.dimension(function(d) {
      return [d.Year];
    });
    hGroup = yearHistogramDimension.group().reduceSum(function(d) {
      if (d.Health === 'H') {
        return 1;
      } else {
        return 0;
      }
    });
    uGroup = yearHistogramDimension.group().reduceSum(function(d) {
      if (d.Health === 'U') {
        return 1;
      } else {
        return 0;
      }
    });
    sGroup = yearHistogramDimension.group().reduceSum(function(d) {
      if (d.Health === 'S') {
        return 1;
      } else {
        return 0;
      }
    });
    dGroup = yearHistogramDimension.group().reduceSum(function(d) {
      if (d.Health === 'D') {
        return 1;
      } else {
        return 0;
      }
    });
    charts['histogram'].height(400).width(350).dimension(yearHistogramDimension).group(hGroup, "Heatlhy").stack(uGroup, "Unhealthy").stack(sGroup, "Sick").stack(dGroup, "Dead").ordinalColors(['green', '#FFD700', 'orange', 'red']).elasticY(true).xAxisLabel("Year").x(d3.scale.linear().domain([2015, 2019])).yAxisLabel("Trees by health categories").xAxis().tickFormat(d3.format("d"));
    charts['livehistogram'] = dc.barChart('#livehistogram');
    liveHistogramDimension = facts.dimension(function(d) {
      return [d.Year];
    });
    sabiGroup = liveHistogramDimension.group().reduceSum(function(d) {
      if ((d.Health === 'H' || d.Health === 'U') && d.Species === 'SABI') {
        return 1;
      } else {
        return 0;
      }
    });
    coulGroup = liveHistogramDimension.group().reduceSum(function(d) {
      if ((d.Health === 'H' || d.Health === 'U') && d.Species === 'COUL') {
        return 1;
      } else {
        return 0;
      }
    });
    atteGroup = liveHistogramDimension.group().reduceSum(function(d) {
      if ((d.Health === 'H' || d.Health === 'U') && d.Species === 'ATTE') {
        return 1;
      } else {
        return 0;
      }
    });
    charts['livehistogram'].height(400).width(350).dimension(liveHistogramDimension).group(sabiGroup, "Sabiniana").stack(coulGroup, "Coulter").stack(atteGroup, "Attenuata").ordinalColors(['#006400', '#32CD32', '#3CB371']).elasticY(true).xAxisLabel("Year").x(d3.scale.linear().domain([2015, 2019])).yAxisLabel("Number of Healthy Trees").legend(dc.legend().x(200).y(10).itemHeight(13).gap(5)).xAxis().tickFormat(d3.format("d"));
    charts['beetlehistogram'] = dc.barChart('#beetlehistogram');
    beetleHistogramDimension = facts.dimension(function(d) {
      return d.Species;
    });
    aGroup = beetleHistogramDimension.group().reduceSum(function(d) {
      if (d.Frass === 'Y' && d['Pitch Tubes'] === 'Y' && d['Sap Drips'] === 'Y' && d.Holes === 'Y') {
        return 1;
      } else {
        return 0;
      }
    });
    bGroup = beetleHistogramDimension.group().reduceSum(function(d) {
      if ((d.Frass === 'N' && d['Pitch Tubes'] === 'Y' && d['Sap Drips'] === 'Y' && d.Holes === 'Y') || (d.Frass === 'Y' && d['Pitch Tubes'] === 'Y' && d['Sap Drips'] === 'Y' && d.Holes === 'N') || (d.Frass === 'Y' && d['Pitch Tubes'] === 'N' && d['Sap Drips'] === 'Y' && d.Holes === 'Y') || (d.Frass === 'Y' && d['Pitch Tubes'] === 'Y' && d['Sap Drips'] === 'N' && d.Holes === 'Y')) {
        return 1;
      } else {
        return 0;
      }
    });
    cGroup = beetleHistogramDimension.group().reduceSum(function(d) {
      if ((d.Frass === 'N' && d['Pitch Tubes'] === 'N' && d['Sap Drips'] === 'Y' && d.Holes === 'Y') || (d.Frass === 'N' && d['Pitch Tubes'] === 'Y' && d['Sap Drips'] === 'N' && d.Holes === 'Y') || (d.Frass === 'N' && d['Pitch Tubes'] === 'Y' && d['Sap Drips'] === 'Y' && d.Holes === 'N') || (d.Frass === 'Y' && d['Pitch Tubes'] === 'N' && d['Sap Drips'] === 'N' && d.Holes === 'Y') || (d.Frass === 'Y' && d['Pitch Tubes'] === 'N' && d['Sap Drips'] === 'Y' && d.Holes === 'N') || (d.Frass === 'Y' && d['Pitch Tubes'] === 'Y' && d['Sap Drips'] === 'N' && d.Holes === 'N')) {
        return 1;
      } else {
        return 0;
      }
    });
    dGroup = beetleHistogramDimension.group().reduceSum(function(d) {
      if ((d.Frass === 'Y' && d['Pitch Tubes'] === 'N' && d['Sap Drips'] === 'N' && d.Holes === 'N') || (d.Frass === 'N' && d['Pitch Tubes'] === 'Y' && d['Sap Drips'] === 'N' && d.Holes === 'N') || (d.Frass === 'N' && d['Pitch Tubes'] === 'N' && d['Sap Drips'] === 'Y' && d.Holes === 'N') || (d.Frass === 'N' && d['Pitch Tubes'] === 'N' && d['Sap Drips'] === 'N' && d.Holes === 'Y')) {
        return 1;
      } else {
        return 0;
      }
    });
    eGroup = beetleHistogramDimension.group().reduceSum(function(d) {
      if (d.Frass === 'N' && d['Pitch Tubes'] === 'N' && d['Sap Drips'] === 'N' && d.Holes === 'N') {
        return 1;
      } else {
        return 0;
      }
    });
    charts['beetlehistogram'].height(400).width(350).dimension(beetleHistogramDimension).group(beetleHistogramDimension.group()).group(aGroup, "Significant Beetle Damage").stack(bGroup, "Lots of Beetle Damage").stack(cGroup, "Some Beetle Damage").stack(dGroup, "Negligable Damage").stack(eGroup, "No Beetle Damage").ordinalColors(['red', '#FF6347', '#FFA500', '#FFD700', 'green']).elasticY(true).xAxisLabel("Species").x(d3.scale.ordinal().domain(['COUL', 'SABI', 'ATTE'])).xUnits(dc.units.ordinal).yAxisLabel("Trees with Beetle Damage").legend(dc.legend().x(200).y(10).itemHeight(13).gap(5));
    charts['pinedata'] = dc.dataTable('#pinedata');
    pineDataDimension = facts.dimension(function(d) {
      return d['Tree Number'];
    });
    charts['pinedata'].width(1000).height(300).dimension(pineDataDimension).group(function(d) {
      return '';
    }).order(d3.ascending).sortBy(function(d) {
      return d['Tree Number'];
    }).size(100).columns([
      (function(d) {
        return d.Species;
      }), (function(d) {
        return d.Height;
      }), (function(d) {
        return d.DBH;
      }), (function(d) {
        return d['Male Cones'];
      }), (function(d) {
        return d['Female Cones'];
      }), (function(d) {
        return d['Pitch Tubes'];
      }), (function(d) {
        return d.Frass;
      }), (function(d) {
        return d['Sap Drips'];
      }), (function(d) {
        return d.Holes;
      })
    ]);
    dc.dataCount(".dc-data-count").dimension(facts).group(all);
    return dc.renderAll();
  });

}).call(this);
